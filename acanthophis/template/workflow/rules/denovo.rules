# These rules are part of Acanthophis. See https://github.com/kdm9/Acanthophis.
# This file *could* be modified, but then be careful when you update them. And
# please, if you find a bug, raise an issue on github so the fix gets shared
# with everyone.
#
# Copyright 2016-2024 Kevin Murray/Gekkonid Consulting
#
# This Source Code Form is subject to the terms of the Mozilla Public License,
# v. 2.0. If a copy of the MPL was not distributed with this file, You can
# obtain one at http://mozilla.org/MPL/2.0/.

rule countsketch:
    input:
        T("reads/samples/{sample}.fastq.gz"),
    output:
        ct=temp(T("kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz")),
        info=P("kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz.info"),
        tsv=P("kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz.info.tsv"),
    log:
        L("kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz.log"),
    resources: **rule_resources(config, "countsketch", runtime=60, mem_gb=16, cores=1)
    conda: "envs/kwip.yml"
    shell:
        "(load-into-counting.py"
        "   -N 1"
        "   -x {wildcards.sketchsize}"
        "   -k {wildcards.ksize}"
        "   -b"
        "   -f"
        "   -s tsv"
        "   -T {threads}"
        "   {output.ct}"
        "   {input}"
        " && cp {output.ct}.info {output.info}" # need these as the countsketch is T() while these are P()
        " && cp {output.ct}.info.tsv {output.tsv}"
        ") >{log} 2>&1"


rule kwipdist:
    input:
        lambda wc: expand(T("kwip/sketch/k{ksize}-s{sketchsize}/{sample}.ct.gz"),
                          ksize=wc.ksize, sketchsize=wc.sketchsize,
                          sample=config["SAMPLESETS"][wc.set]),
    output:
        d=P("kwip/{set}~k{ksize}~s{sketchsize}.dist"),
        k=P("kwip/{set}~k{ksize}~s{sketchsize}.kern"),
    log: L("kwip/{set}~k{ksize}~s{sketchsize}.dist.log"),
    resources: **rule_resources(config, "kwipdist", runtime=2880, mem_gb=16, cores=8)
    conda: "envs/kwip.yml"
    shell:
        "kwip"
        " -d {output.d}"
        " -k {output.k}"
        " -t {threads}"
        " {input}"
        " >{log} 2>&1"


rule mash_sketch_set:
    input:
        lambda wc: T(expand("reads/samples/{sample}.fastq.gz",
                          sample=config["SAMPLESETS"][wc.set])),
    output:
        temp(T("mash/{set}~k{ksize}~s{sketchsize}.sketch.msh"))
    log: L("mash/{set}~k{ksize}~s{sketchsize}.sketch.msh.log")
    resources: **rule_resources(config, "mash_sketch_set", runtime=2880, mem_gb=16, cores=48)
    conda: "envs/mash.yml"
    container: "docker://ghcr.io/kdm9/mash:latest"
    shell:
        " mash sketch"
        "   -k {wildcards.ksize}"
        "   -s {wildcards.sketchsize}"
        "   -p {threads}"
        "   -o {output}"
        "   {input}"
        " >{log} 2>&1"


rule mash_dist_set:
    input:
        T("mash/{set}~k{ksize}~s{sketchsize}.sketch.msh")
    output:
        P("mash/{set}~k{ksize}~s{sketchsize}.dist")
    log:
        L("mash/{set}~k{ksize}~s{sketchsize}.dist.log")
    resources: **rule_resources(config, "mash_dist_set", runtime=2880, mem_gb=16, cores=48)
    conda: "envs/mash.yml"
    container: "docker://ghcr.io/kdm9/mash:latest"
    shell:
        "mash dist"
        "   -p {threads}"
        "   -t" # tabular format
        "   {input} {input}" # needs input twice
        " >{output}"
        " 2>{log}"


rule all_kwip:
    input:
        [ P(expand("kwip/{set}~k{ksize}~s{sketchsize}.dist",
               ksize=config["tool_settings"]["kwip"]["kmer_size"],
               sketchsize=config["tool_settings"]["kwip"]["sketch_size"],
               set=sampleset))
        for sampleset in config["samplesets"]
        if config["samplesets"][sampleset].get("kwip", False)
        ],


rule all_mash:
    input:
        [ P(expand("mash/{set}~k{ksize}~s{sketchsize}.dist",
               ksize=config["tool_settings"]["mash"]["kmer_size"],
               sketchsize=config["tool_settings"]["mash"]["sketch_size"],
               set=sampleset))
        for sampleset in config["samplesets"]
        if config["samplesets"][sampleset].get("mash", False)
        ],


rule all_denovo:
    input:
        rules.all_kwip.input,
        rules.all_mash.input,
