# These rules are part of Acanthophis. See https://github.com/kdm9/Acanthophis.
# This file *could* be modified, but then be careful when you update them. And
# please, if you find a bug, raise an issue on github so the fix gets shared
# with everyone.
#
# Copyright 2016-2024 Kevin Murray/Gekkonid Consulting
#
# This Source Code Form is subject to the terms of the Mozilla Public License,
# v. 2.0. If a copy of the MPL was not distributed with this file, You can
# obtain one at http://mozilla.org/MPL/2.0/.

def _qcparam(wc, param):
    D = config["tool_settings"]["adapterremoval"]
    type = config["RL_QCTYPE"][(wc.run, wc.lib)]
    if type in D:
        return D[type][param]
    else:
        return D["__default__"][param]


rule qcreads_paired_il:
    input:
        reads=lambda wc: R(config["RAWDATA_PATHS"][(wc.run, wc.lib)]["il"], keep_local=True),
    output:
        reads=temp(T("reads/qc/{run}~{lib}_il.fastq.gz")),
        settings=P("stats/adapterremoval/{run}~{lib}_il.settings"),
    resources: **rule_resources(config, "qcreads_paired_il", runtime=60, mem_gb=1, disk_gb=2, cores=4)
    log: L("reads/qc/{run}~{lib}_il.fastq.log"),
    params:
        adpfile=lambda wc: _qcparam(wc, "adapter_file"),
        minqual=lambda wc: _qcparam(wc, "minqual"),
        qualenc=lambda wc: _qcparam(wc, "qualenc"),
        maxqualval=lambda wc: _qcparam(wc, "maxqualval"),
        ziplevel=config.get("tool_settings", {}).get('ziplevel', 6),
    conda: "envs/reads.yml"
    container: "docker://ghcr.io/kdm9/acanthophis-qc:latest"
    shell:
        "( AdapterRemoval"
        "   --file1 {input.reads}"
        "   --adapter-list {params.adpfile}"
        "   --interleaved"
        "   --combined-output"
        "   --trimns"
        "   --trimqualities"
        "   --trimwindows 10"
        "   --qualitymax {params.maxqualval}"
        "   --qualitybase {params.qualenc}"
        "   --qualitybase-output 33"
        "   --minquality {params.minqual}"
        "   --threads {threads}"
        "   --settings {output.settings}"
        "   --output1 >(pigz -{params.ziplevel} -p {threads} >{output.reads})"
        ") >{log} 2>&1"


rule qcreads_paired_r12:
    input:
        r1=lambda wc: R(config["RAWDATA_PATHS"][(wc.run, wc.lib)]["r12"]["r1"], keep_local=True),
        r2=lambda wc: R(config["RAWDATA_PATHS"][(wc.run, wc.lib)]["r12"]["r2"], keep_local=True),
    output:
        reads=temp(T("reads/qc/{run}~{lib}_r12.fastq.gz")),
        settings=P("stats/adapterremoval/{run}~{lib}_r12.settings"),
    resources: **rule_resources(config, "qcreads_paired_r12", runtime=60, mem_gb=1, disk_gb=2, cores=4)
    log: L("reads/qc/{run}~{lib}_r12.fastq.log"),
    params:
        adpfile=lambda wc: _qcparam(wc, "adapter_file"),
        minqual=lambda wc: _qcparam(wc, "minqual"),
        qualenc=lambda wc: _qcparam(wc, "qualenc"),
        maxqualval=lambda wc: _qcparam(wc, "maxqualval"),
        ziplevel=config.get("tool_settings", {}).get('ziplevel', 6),
    conda: "envs/reads.yml"
    container: "docker://ghcr.io/kdm9/acanthophis-qc:latest"
    shell:
        "( AdapterRemoval"
        "   --file1 {input.r1}"
        "   --file2 {input.r2}"
        "   --adapter-list {params.adpfile}"
        "   --combined-output"
        "   --interleaved-output"
        "   --trimns"
        "   --trimqualities"
        "   --trimwindows 10"
        "   --qualitymax {params.maxqualval}"
        "   --qualitybase {params.qualenc}"
        "   --qualitybase-output 33"
        "   --minquality {params.minqual}"
        "   --threads {threads}"
        "   --settings {output.settings}"
        "   --output1 >(pigz -{params.ziplevel} -p {threads} >{output.reads})"
        ") >{log} 2>&1"


rule qcreads_se:
    input:
        se=lambda wc: R(config["RAWDATA_PATHS"][(wc.run, wc.lib)]["se"], keep_local=True),
    output:
        reads=temp(T("reads/qc/{run}~{lib}_se.fastq.gz")),
        settings=P("stats/adapterremoval/{run}~{lib}_se.settings"),
    log:
        L("reads/qc/{run}~{lib}_se.fastq.log"),
    resources: **rule_resources(config, "qcreads_se", runtime=60, mem_gb=1, disk_gb=2, cores=4)
    params:
        adpfile=lambda wc: _qcparam(wc, "adapter_file"),
        minqual=lambda wc: _qcparam(wc, "minqual"),
        qualenc=lambda wc: _qcparam(wc, "qualenc"),
        maxqualval=lambda wc: _qcparam(wc, "maxqualval"),
        ziplevel=config.get("tool_settings", {}).get('ziplevel', 6),
    conda: "envs/reads.yml"
    container: "docker://ghcr.io/kdm9/acanthophis-qc:latest"
    shell:
        "( AdapterRemoval"
        "   --file1 {input.se}"
        "   --adapter-list {params.adpfile}"
        "   --combined-output"
        "   --trimns"
        "   --trimqualities"
        "   --trimwindows 10"
        "   --qualitymax {params.maxqualval}"
        "   --qualitybase {params.qualenc}"
        "   --qualitybase-output 33"
        "   --minquality {params.minqual}"
        "   --threads {threads}"
        "   --settings {output.settings}"
        "   --output1 >(pigz -{params.ziplevel} -p {threads} >{output.reads})"
        ") >{log} 2>&1"



rule merge_qcd_reads:
    input:
        lambda wc: T(expand("reads/qc/{{run}}~{{lib}}_{pairing}.fastq.gz",
                            pairing=config["RAWDATA_PATHS"][(wc.run, wc.lib)].keys())),
    output:
        reads=T("reads/runs/{run}~{lib}.fastq.gz"),
    log:
        L("reads/runs/{run}~{lib}.fastq.gz.log"),
    resources: **rule_resources(config, "merge_qcd_reads", runtime=30, mem_gb=1, disk_gb=1, cores=1)
    conda: "envs/reads.yml"
    container: "docker://ghcr.io/kdm9/acanthophis-qc:latest"
    shell:
        "(cat {input} >{output} ) >{log} 2>&1"


rule read_count_librun_indiv:
    input:
        T("reads/runs/{run}~{lib}.fastq.gz")
    output:
        temp(T("stats/reads/readnum_librun/{run}~{lib}.tsv")),
    log:
        L("stats/reads/readnum_librun/{run}~{lib}.tsv.log"),
    conda: "envs/reads.yml"
    container: "docker://ghcr.io/kdm9/acanthophis-qc:latest"
    resources: **rule_resources(config, "read_count_librun_indiv", runtime=10, mem_gb=1, disk_gb=1)
    shell:
        "( seqhax stats"
        "    {input}"
        "    >{output}"
        " ) 2>{log}"


rule read_count_fromindiv:
    input:
        [T("stats/reads/readnum_librun/{run}~{lib}.tsv".format(run=run, lib=lib))
          for sset in config["samplesets"]
          for samp in config["SAMPLESETS"][sset]
          for run, lib in config["SAMP2RUNLIB"][samp]
          ],
    output:
        P("stats/reads/readnum_librun.tsv"),
    resources: **rule_resources(config, "read_count_fromindiv", runtime=10, mem_gb=1, disk_gb=1)
    run:
        with open(output[0], "w") as fh:
            for i, tsv in enumerate(input):
                with open(tsv) as tsvfh:
                    if i > 0:
                        next(tsvfh)  # skip header on all but first file
                    for line in tsvfh:
                        fh.write(line)



rule samplefastqpipe:
    input:
        lambda wc: T(["reads/runs/{run}~{lib}.fastq.gz".format(run=r, lib=l) for r, l in config["SAMP2RUNLIB"][wc.sample]]),
    output: pipe(T("reads/samples_pipe/{sample}.fastq.gz"))
    log: L("reads/samples_pipe/{sample}.fastq.gz.log")
    resources: **rule_resources(config, "samplefastqpipe", runtime=10, mem_gb=1, disk_gb=1)
    shell:
        "cat {input} > {output}"


rule samplefastqfile:
    input:
        lambda wc: T(["reads/runs/{run}~{lib}.fastq.gz".format(run=r, lib=l) for r, l in config["SAMP2RUNLIB"][wc.sample]]),
    output: T("reads/samples/{sample}.fastq.gz")
    log: L("reads/samples/{sample}.fastq.gz.log")
    resources: **rule_resources(config, "samplefastqfile", runtime=10, mem_gb=1, disk_gb=1)
    shell:
        "cat {input} > {output}"


rule split_pair_sample:
    input:
        lambda wc: T(["reads/runs/{run}~{lib}.fastq.gz".format(run=r, lib=l) for r, l in config["SAMP2RUNLIB"][wc.sample]]),
    output:
        r1=P("reads/samples/{sample}_R1.fastq.gz"),
        r2=P("reads/samples/{sample}_R2.fastq.gz"),
        se=P("reads/samples/{sample}_se.fastq.gz"),
        yml=P("reads/samples/{sample}_split.stats.yml")
    log:
        L("reads/samples/{sample}_split.log"),
    resources: **rule_resources(config, "split_pair_sample", runtime=30, mem_gb=1, disk_gb=1, cores=8)
    conda: "envs/reads.yml"
    container: "docker://ghcr.io/kdm9/acanthophis-qc:latest"
    params:
        ziplevel=config.get("tool_settings", {}).get('ziplevel', 6),
    shell:
        "(seqhax pairs"
        "   -1 >(pigz -p {threads} -{params.ziplevel} >{output.r1})"
        "   -2 >(pigz -p {threads} -{params.ziplevel} >{output.r2})"
        "   -u >(pigz -p {threads} -{params.ziplevel} >{output.se})"
        "   -l 30"
        "   -y {output.yml}"
        "   <(zcat {input})"
        " ) &>{log}"


def all_raw_fastqs(wc):
    files = []
    for file in config["RAWDATA_PATHS"][(wc.run, wc.lib)].values():
        if isinstance(file, dict):
            for file2 in file.values():
                files.append(R(file2, keep_local=True))
        else:
            files.append(R(file, keep_local=True))
    return files

rule fastqc_preqc:
    input:
        reads=all_raw_fastqs,
    output:
        fqczip=P("stats/fastqc/preqc/{run}~{lib}_fastqc.zip"),
    log: L("stats/fastqc/preqc/{run}~{lib}_fastqc.log"),
    resources: **rule_resources(config, "fastqc_preqc", runtime=30, mem_gb=1, cores=1)
    container: "docker://ghcr.io/kdm9/acanthophis-qc:latest"
    conda: "envs/qcstats.yml"
    shell:
        "(T=$(mktemp -d);"
        ' trap "rm -rf $T" EXIT;'
        " cat {input.reads} > $T/{wildcards.run}~{wildcards.lib}.fastq.gz &&"
        " fastqc"
        "   -t {threads}"
        "   -o $T"
        "   $T/{wildcards.run}~{wildcards.lib}.fastq.gz"
        " && mv $T/*_fastqc.zip {output.fqczip}"
        ") >{log} 2>&1"


rule fastqc_postqc:
    input:
        reads=T("reads/runs/{run}~{lib}.fastq.gz"),
    output:
        fqczip=P("stats/fastqc/postqc/{run}~{lib}_fastqc.zip"),
    log: L("stats/fastqc/postqc/{run}~{lib}_fastqc.zip.log"),
    resources: **rule_resources(config, "fastqc_postqc", runtime=30, mem_gb=1, cores=1)
    container: "docker://ghcr.io/kdm9/acanthophis-qc:latest"
    conda: "envs/qcstats.yml"
    shell:
        "set -x; (T=$(mktemp -d);"
        ' trap "rm -rf $T" EXIT;'
        " fastqc"
        "   -t {threads}"
        "   -o $T"
        "   {input.reads}"
        " && mv $T/*_fastqc.zip {output.fqczip}"
        ") >{log} 2>&1"


rule multiqc_fastqc:
    input:
        lambda wc: P([f"stats/fastqc/{wc.prepost}/{run}~{lib}_fastqc.zip"
                      for samp in config["SAMPLESETS"][wc.sampleset]
                      for run, lib in config["SAMP2RUNLIB"][samp]])
    output:
        html=P("stats/multiqc/reads-{prepost}~{sampleset}_multiqc.html"),
    log:
        log=L("stats/multiqc/reads-{prepost}~{sampleset}_multiqc.log"),
    resources: **rule_resources(config, "multiqc_fastqc", runtime=30, mem_gb=2)
    conda: "envs/qcstats.yml"
    container: "docker://multiqc/multiqc:v1.20"
    shell:
        "multiqc"
        "   --no-megaqc-upload"
        "   --interactive"
        "   --no-data-dir"
        "   --comment 'Fastqc stats {wildcards.prepost} for sample set {wildcards.sampleset}'"
        "   --filename {output.html}"
        "   {input}"
        " >{log} 2>&1"


rule all_sample_fastqs:
    input:
        P([f"reads/samples/{sample}_{r}.fastq.gz"
          for r in ["R1", "R2", "se"]
          for sset in config["samplesets"]
          for sample in config["SAMPLESETS"][sset]
          if config["samplesets"][sset].get("persample_reads", False)
        ]),


rule all_runlib_qc:
    input:
        T(["reads/runs/{run}~{lib}.fastq.gz".format(run=run, lib=lib)
          for sset in config["samplesets"]
          for samp in config["SAMPLESETS"][sset]
          for run, lib in config["SAMP2RUNLIB"][samp]
        ]),


rule all_runlib_readstats:
    input:
        P("stats/reads/readnum_librun.tsv"),


rule all_runlib_fastqc:
    input:
        P([f"stats/fastqc/{prepost}/{run}~{lib}_fastqc.zip"
          for prepost in ["preqc", "postqc"]
          for sset in config["samplesets"]
          for samp in config["SAMPLESETS"][sset]
          for run, lib in config["SAMP2RUNLIB"][samp]
          if config["samplesets"][sset].get("fastqc", False)
        ]),
        P([f"stats/multiqc/reads-{prepost}~{sset}_multiqc.html"
          for prepost in ["preqc", "postqc"]
          for sset in config["samplesets"]
          if config["samplesets"][sset].get("fastqc", False)
        ]),



rule all_reads:
    input:
        rules.all_runlib_qc.input,
        rules.all_runlib_fastqc.input,
        rules.all_sample_fastqs.input,

